blueprint:
  name: Motion-activated Light with Timer and Condition
  description: Turn on a light when motion is detected and turn it off when "no-motion" timer finishes on specific condifion
  domain: automation
  source_url: https://github.com/DmitriySafronov/home-assistant_blueprints/blob/master/automation/motion_light_timer_condition.yaml
  input:
    entity_trigger:
      name: Motion Sensor
      description: Binary sensor that detects motion
      selector:
        entity:
          domain: binary_sensor
          device_class: motion
    entity_condition:
      name: Condition
      description: Binary sensor or input boolean to enable/disable automation
      selector:
        entity:
          domain:
            - binary_sensor
            - input_boolean
    entity_target:
      name: Motion Light
      description: Light entity to control
      selector:
        entity:
          domain: light
    timer_no_motion:
      name: Wait timer
      description: Time to leave the light on after last motion is detected.
      selector:
        entity:
          domain: timer

# If motion is detected within the delay,
# we restart the script.
mode: restart
max_exceeded: silent

trigger:
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: !input timer_no_motion
    id: timer
  - platform: state
    entity_id:
      - !input entity_trigger
    id: motion
  - platform: state
    entity_id:
      - !input entity_target
    id: light

condition:
  - condition: state
    entity_id: !input entity_condition
    state: "on"

action:
  - choose:
      # Timer finished - turn off the light
      - conditions:
          - condition: trigger
            id: timer
        sequence:
          - service: light.turn_off
            target:
              entity_id: !input entity_target
      
      # Motion detected while light is off - turn on light
      - conditions:
          - condition: trigger
            id: motion
          - condition: state
            entity_id: !input entity_trigger
            state: "on"
          - condition: state
            entity_id: !input entity_target
            state: "off"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input entity_target
      
      # Motion detected while light is on - cancel timer
      - conditions:
          - condition: trigger
            id: motion
          - condition: state
            entity_id: !input entity_trigger
            state: "on"
          - condition: state
            entity_id: !input entity_target
            state: "on"
        sequence:
          - service: timer.cancel
            target:
              entity_id: !input timer_no_motion
      
      # Motion stopped while light is on - start timer
      - conditions:
          - condition: trigger
            id: motion
          - condition: state
            entity_id: !input entity_trigger
            state: "off"
          - condition: state
            entity_id: !input entity_target
            state: "on"
        sequence:
          - service: timer.start
            target:
              entity_id: !input timer_no_motion
      
      # Light turned on externally - start timer
      - conditions:
          - condition: trigger
            id: light
          - condition: state
            entity_id: !input entity_target
            state: "on"
          - condition: template
            value_template: "{{ trigger.to_state.context.id != context.id }}"
        sequence:
          - service: timer.start
            target:
              entity_id: !input timer_no_motion
      
      # Light turned off externally - cancel timer
      - conditions:
          - condition: trigger
            id: light
          - condition: state
            entity_id: !input entity_target
            state: "off"
        sequence:
          - service: timer.cancel
            target:
              entity_id: !input timer_no_motion
